local Players = game:GetService("Players")
local player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Create the GUI
local gui = Instance.new("ScreenGui")
gui.Name = "CodeExecutor"
gui.Parent = player:WaitForChild("PlayerGui")

-- Main frame (now taller to accommodate all elements)
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 350, 0, 350) -- Increased height
frame.Position = UDim2.new(0.5, -175, 0.5, -175)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
frame.BorderSizePixel = 0
frame.Active = true
frame.ClipsDescendants = true
frame.Parent = gui

-- Add rounded corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 8)
corner.Parent = frame

-- Title bar (draggable area)
local titleBar = Instance.new("Frame")
titleBar.Size = UDim2.new(1, 0, 0, 30)
titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
titleBar.BorderSizePixel = 0
titleBar.Parent = frame

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 8)
titleCorner.Parent = titleBar

-- Title text
local title = Instance.new("TextLabel")
title.Text = "Code Executor (Drag Here)"
title.Size = UDim2.new(1, -60, 1, 0)
title.BackgroundTransparency = 1
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.SourceSansBold
title.TextXAlignment = Enum.TextXAlignment.Left
title.Parent = titleBar

-- Control buttons
local hideButton = Instance.new("TextButton")
hideButton.Text = "_"
hideButton.Size = UDim2.new(0, 25, 0, 25)
hideButton.Position = UDim2.new(1, -55, 0, 2)
hideButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
hideButton.TextColor3 = Color3.new(1, 1, 1)
hideButton.Font = Enum.Font.SourceSansBold
hideButton.Parent = titleBar

local closeButton = Instance.new("TextButton")
closeButton.Text = "X"
closeButton.Size = UDim2.new(0, 25, 0, 25)
closeButton.Position = UDim2.new(1, -25, 0, 2)
closeButton.BackgroundColor3 = Color3.fromRGB(120, 50, 50)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.Font = Enum.Font.SourceSansBold
closeButton.Parent = titleBar

-- Content frame
local contentFrame = Instance.new("Frame")
contentFrame.Size = UDim2.new(1, 0, 1, -30)
contentFrame.Position = UDim2.new(0, 0, 0, 30)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = frame

-- Code input (slightly reduced height to make room)
local codeLabel = Instance.new("TextLabel")
codeLabel.Text = "Code to execute:"
codeLabel.Size = UDim2.new(0.9, 0, 0, 20)
codeLabel.Position = UDim2.new(0.05, 0, 0, 5)
codeLabel.BackgroundTransparency = 1
codeLabel.TextColor3 = Color3.new(1, 1, 1)
codeLabel.TextXAlignment = Enum.TextXAlignment.Left
codeLabel.Parent = contentFrame

local codeInput = Instance.new("TextBox")
codeInput.PlaceholderText = "Enter Lua code here"
codeInput.Size = UDim2.new(0.9, 0, 0, 120) -- Reduced height
codeInput.Position = UDim2.new(0.05, 0, 0, 25)
codeInput.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
codeInput.TextColor3 = Color3.new(1, 1, 1)
codeInput.Font = Enum.Font.SourceSans
codeInput.TextSize = 14
codeInput.TextXAlignment = Enum.TextXAlignment.Left
codeInput.TextYAlignment = Enum.TextYAlignment.Top
codeInput.TextWrapped = true
codeInput.MultiLine = true
codeInput.ClearTextOnFocus = false
codeInput.Parent = contentFrame

-- Clear text button (new position)
local clearButton = Instance.new("TextButton")
clearButton.Text = "Clear Code"
clearButton.Size = UDim2.new(0.9, 0, 0, 25)
clearButton.Position = UDim2.new(0.05, 0, 0, 150)
clearButton.BackgroundColor3 = Color3.fromRGB(80, 80, 90)
clearButton.TextColor3 = Color3.new(1, 1, 1)
clearButton.Parent = contentFrame

-- Delay input section (repositioned)
local delayLabel = Instance.new("TextLabel")
delayLabel.Text = "Loop delay (seconds):"
delayLabel.Size = UDim2.new(0.9, 0, 0, 20)
delayLabel.Position = UDim2.new(0.05, 0, 0, 180)
delayLabel.BackgroundTransparency = 1
delayLabel.TextColor3 = Color3.new(1, 1, 1)
delayLabel.TextXAlignment = Enum.TextXAlignment.Left
delayLabel.Parent = contentFrame

local delayInput = Instance.new("TextBox")
delayInput.PlaceholderText = "0.1"
delayInput.Text = "0.1"
delayInput.Size = UDim2.new(0.9, 0, 0, 25)
delayInput.Position = UDim2.new(0.05, 0, 0, 200)
delayInput.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
delayInput.TextColor3 = Color3.new(1, 1, 1)
delayInput.Parent = contentFrame

-- Action buttons (repositioned with better spacing)
local executeOnceButton = Instance.new("TextButton")
executeOnceButton.Text = "Execute Once"
executeOnceButton.Size = UDim2.new(0.9, 0, 0, 30)
executeOnceButton.Position = UDim2.new(0.05, 0, 0, 230)
executeOnceButton.BackgroundColor3 = Color3.fromRGB(60, 80, 120)
executeOnceButton.TextColor3 = Color3.new(1, 1, 1)
executeOnceButton.Parent = contentFrame

local toggleLoopButton = Instance.new("TextButton")
toggleLoopButton.Text = "Start Loop"
toggleLoopButton.Size = UDim2.new(0.9, 0, 0, 30)
toggleLoopButton.Position = UDim2.new(0.05, 0, 0, 265)
toggleLoopButton.BackgroundColor3 = Color3.fromRGB(60, 120, 80)
toggleLoopButton.TextColor3 = Color3.new(1, 1, 1)
toggleLoopButton.Parent = contentFrame

-- Status labels (repositioned)
local statusLabel = Instance.new("TextLabel")
statusLabel.Text = "Status: Ready"
statusLabel.Size = UDim2.new(0.9, 0, 0, 20)
statusLabel.Position = UDim2.new(0.05, 0, 0, 300)
statusLabel.BackgroundTransparency = 1
statusLabel.TextColor3 = Color3.new(1, 1, 1)
statusLabel.TextXAlignment = Enum.TextXAlignment.Left
statusLabel.Parent = contentFrame

local cooldownLabel = Instance.new("TextLabel")
cooldownLabel.Text = "Next execution: -"
cooldownLabel.Size = UDim2.new(0.9, 0, 0, 20)
cooldownLabel.Position = UDim2.new(0.05, 0, 0, 320)
cooldownLabel.BackgroundTransparency = 1
cooldownLabel.TextColor3 = Color3.new(1, 1, 1)
cooldownLabel.TextXAlignment = Enum.TextXAlignment.Left
cooldownLabel.Visible = false
cooldownLabel.Parent = contentFrame

-- Add rounded corners to all interactive elements
local inputCorner = Instance.new("UICorner")
inputCorner.CornerRadius = UDim.new(0, 4)
inputCorner.Parent = codeInput
inputCorner:Clone().Parent = delayInput

local buttonCorner = Instance.new("UICorner")
buttonCorner.CornerRadius = UDim.new(0, 4)
for _, button in pairs({executeOnceButton, toggleLoopButton, hideButton, closeButton, clearButton}) do
    buttonCorner:Clone().Parent = button
end

-- Variables
local runningLoop = false
local currentDelay = 0.1
local loopThread = nil
local lastExecutionTime = 0
local cooldownThread = nil
local isDragging = false

-- Function to safely execute code
local function executeCode(code)
    local success, errorMsg = pcall(function()
        local func, err = loadstring("return function() "..code.."\nend")
        if func then
            func()()
        else
            error(err)
        end
    end)
    
    lastExecutionTime = os.clock()
    
    if not success then
        statusLabel.Text = "Error: " .. tostring(errorMsg):gsub("^.+:%d+: ", "")
        task.wait(2)
        if runningLoop then
            statusLabel.Text = "Status: Loop running (error)"
        else
            statusLabel.Text = "Status: Ready"
        end
    end
end

-- Update cooldown display
local function updateCooldown()
    while runningLoop do
        local remaining = math.max(0, currentDelay - (os.clock() - lastExecutionTime))
        cooldownLabel.Text = string.format("Next execution: %.2fs", remaining)
        task.wait(0.05)
    end
    cooldownLabel.Text = "Next execution: -"
end

-- Input validation
local function validateDelay()
    local delay = tonumber(delayInput.Text)
    if delay and delay > 0 then
        currentDelay = delay
        return true
    else
        statusLabel.Text = "Invalid delay - using 0.1s"
        delayInput.Text = "0.1"
        currentDelay = 0.1
        task.wait(1.5)
        if runningLoop then
            statusLabel.Text = "Status: Loop running"
        else
            statusLabel.Text = "Status: Ready"
        end
        return false
    end
end

-- Clear text button
clearButton.MouseButton1Click:Connect(function()
    codeInput.Text = ""
    codeInput:CaptureFocus()
end)

-- Execute once button
executeOnceButton.MouseButton1Click:Connect(function()
    if codeInput.Text ~= "" then
        statusLabel.Text = "Status: Executing..."
        executeCode(codeInput.Text)
        if not runningLoop then
            statusLabel.Text = "Status: Execution complete"
            task.wait(1)
            statusLabel.Text = "Status: Ready"
        end
    end
end)

-- Toggle loop button
toggleLoopButton.MouseButton1Click:Connect(function()
    if codeInput.Text == "" then 
        statusLabel.Text = "Status: No code to execute"
        task.wait(1)
        statusLabel.Text = "Status: Ready"
        return 
    end
    
    if runningLoop then
        -- Stop the loop
        runningLoop = false
        if loopThread then task.cancel(loopThread) end
        if cooldownThread then task.cancel(cooldownThread) end
        toggleLoopButton.Text = "Start Loop"
        toggleLoopButton.BackgroundColor3 = Color3.fromRGB(60, 120, 80)
        statusLabel.Text = "Status: Loop stopped"
        cooldownLabel.Visible = false
    else
        -- Start the loop
        if validateDelay() then
            runningLoop = true
            toggleLoopButton.Text = "Stop Loop"
            toggleLoopButton.BackgroundColor3 = Color3.fromRGB(120, 60, 80)
            statusLabel.Text = "Status: Loop running"
            cooldownLabel.Visible = true
            lastExecutionTime = os.clock()
            
            loopThread = task.spawn(function()
                while runningLoop do
                    executeCode(codeInput.Text)
                    task.wait(currentDelay)
                end
            end)
            
            cooldownThread = task.spawn(updateCooldown)
        end
    end
end)

-- Hide button functionality
hideButton.MouseButton1Click:Connect(function()
    contentFrame.Visible = not contentFrame.Visible
    if contentFrame.Visible then
        frame.Size = UDim2.new(0, 350, 0, 350)
        hideButton.Text = "_"
    else
        frame.Size = UDim2.new(0, 350, 0, 30)
        hideButton.Text = "+"
    end
end)

-- Close button functionality
closeButton.MouseButton1Click:Connect(function()
    if runningLoop then
        runningLoop = false
        if loopThread then task.cancel(loopThread) end
        if cooldownThread then task.cancel(cooldownThread) end
    end
    gui:Destroy()
end)

-- Improved dragging functionality
local dragStartPos, frameStartPos

titleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isDragging = true
        dragStartPos = Vector2.new(input.Position.X, input.Position.Y)
        frameStartPos = Vector2.new(frame.AbsolutePosition.X, frame.AbsolutePosition.Y)
        
        -- Capture the input even if mouse leaves the frame
        local conn
        conn = input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                isDragging = false
                conn:Disconnect()
            end
        end)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local mousePos = Vector2.new(input.Position.X, input.Position.Y)
        local delta = mousePos - dragStartPos
        frame.Position = UDim2.new(
            0, frameStartPos.X + delta.X,
            0, frameStartPos.Y + delta.Y
        )
    end
end)
